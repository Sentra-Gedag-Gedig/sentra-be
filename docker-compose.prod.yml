version: '3.8'

services:
  nginx:
    image: nginx:1.23.1-alpine
    container_name: sentra-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      golang-app:
        condition: service_healthy
    restart: always
    networks:
      - sentra-prod-network
    # Production nginx configuration
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  postgres:
    image: postgres:14-alpine
    container_name: sentra-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      # Production optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    ports:
      - "127.0.0.1:${DB_PORT:-5432}:5432" # Bind to localhost only
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      # Production PostgreSQL configuration
      - ./postgres/postgresql.prod.conf:/etc/postgresql/postgresql.conf:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - sentra-prod-network
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    # Security: run as non-root user
    user: "999:999"

  redis:
    image: redis:7-alpine
    container_name: sentra-redis-prod
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "127.0.0.1:6379:6379" # Bind to localhost only
    volumes:
      - redis_prod_data:/data
      # Production Redis configuration
      - ./redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - sentra-prod-network
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    # Security: run as non-root user
    user: "999:999"

  golang-app:
    # Use pre-built image from registry
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/sentra-backend:${IMAGE_TAG:-latest}
    container_name: sentra-backend-prod
    environment:
      # Database Config
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE:-require}
      
      # Environment config
      ENV: production
      
      # Fiber config
      APP_PORT: ${APP_PORT:-8080}
      APP_ADDR: 0.0.0.0
      
      # JWT Config
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
      
      # Google OAuth2
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_STATE: ${GOOGLE_STATE}
      
      # Redis
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_ADDRESS: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # SMTP
      SMTP_MAIL: ${SMTP_MAIL}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
      # AI Services URLs
      AI_FACE_DETECTION_URL: ${AI_FACE_DETECTION_URL}
      AI_KTP_DETECTION_URL: ${AI_KTP_DETECTION_URL}
      AI_QRIS_DETECTION_URL: ${AI_QRIS_DETECTION_URL}
      AI_FACE_DETECTION_WS_URL: ${AI_FACE_DETECTION_WS_URL}
      AI_KTP_DETECTION_WS_URL: ${AI_KTP_DETECTION_WS_URL}
      AI_QRIS_DETECTION_WS_URL: ${AI_QRIS_DETECTION_WS_URL}
      
      # Gemini
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL_NAME: ${GEMINI_MODEL_NAME:-gemini-pro-vision}
      
      # DOKU
      DOKU_CLIENT_ID: ${DOKU_CLIENT_ID}
      DOKU_SECRET_KEY: ${DOKU_SECRET_KEY}
      DOKU_IS_PRODUCTION: ${DOKU_IS_PRODUCTION:-true}
      DOKU_PUBLIC_KEY: ${DOKU_PUBLIC_KEY}
      PASSPHRASE: ${PASSPHRASE}
      
      # AWS S3
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
    volumes:
      # Only mount necessary files for production
      - ./private.key:/home/appuser/private.key:ro
      - ./storage/logs:/home/appuser/storage/logs
      # Production: mount configuration files
      - ./config/production.yaml:/home/appuser/config/production.yaml:ro
    ports:
      - "127.0.0.1:${APP_PORT:-8080}:${APP_PORT:-8080}" # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    # Production health check
    healthcheck:
      test: CMD wget --no-verbose --tries=1 --spider http://localhost:${APP_PORT:-8080}/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - sentra-prod-network
    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
    # Security configurations
    read_only: true
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m


volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sentra/data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sentra/data/redis
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  sentra-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: sentra-prod