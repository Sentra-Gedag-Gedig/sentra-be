services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - golang-app
      - face-detection-service
      - ktp-service
      - qris-service
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-tyokeren}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-14Oktober04}
      POSTGRES_DB: ${DB_NAME:-tyokeren}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tyokeren}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  face-detection-service:
    build:
      context: ../face_detection_service
      dockerfile: Dockerfile
    container_name: face-detection-service
    ports:
      - "8000:8000"
    restart: unless-stopped

  ktp-service:
    build:
      context: ../ktp_service
      dockerfile: Dockerfile
    container_name: ktp-service
    ports:
      - "8001:8000"
    restart: unless-stopped

  qris-service:
    build:
      context: ../qris_service
      dockerfile: Dockerfile
    container_name: qris-service
    ports:
      - "8002:8000"
    restart: unless-stopped

  golang-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: golang-app
    environment:
      - DB_USER=${DB_USER:-tyokeren}
      - DB_PASSWORD=${DB_PASSWORD:-14Oktober04}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-tyokeren}
      - REDIS_ADDRESS=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispassword}
      - WEBSOCKET_URL=ws://face-detection-service:8000/api/v1/detect/ws
      - KTP_WEBSOCKET_URL=ws://ktp-service:8000/api/v1/ktp/ws
      - QRIS_WEBSOCKET_URL=ws://qris-service:8000/api/v1/qris/ws
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      face-detection-service:
        condition: service_started
      ktp-service:
        condition: service_started
      qris-service:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: